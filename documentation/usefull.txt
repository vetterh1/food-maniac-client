---------------------------------------------------------------
                           INSTALL 
---------------------------------------------------------------

Base: MERN-STARTER

-------------  Additional modules ---------------

// For managing multiple config files (per env) (default file: config/default.json) :
npm install config --save

// For nodejs logging:
npm install winston --save

// For HTTP node.js logging:
npm install morgan --save
npm install file-stream-rotator --save

// For Google maps:
npm install google-maps-react --save

// For UI compornents:
npm install material-ui --save
npm install react-tap-event-plugin --save

npm install react-fontawesome --save

// For testing
npm install mocha --save-dev
npm install chai --save-dev
npm install chai-http --save-dev

// Note about Mocha error on css & images, use an ignore compiler:
In package.json    
    "test": "cross-env NODE_ENV=test ./node_modules/.bin/mocha --compilers js:babel-core/register,css:test/mocha_ignore.js,png:test/mocha_ignore.js -d test/**/*.js"
In Test folder: add a mocha_ignore.js file:
  function donothing() { return null; }
  require.extensions['.png'] = donothing;
  require.extensions['.css'] = donothing;




--------------  For windows  -----------------

node_gyp install after:
npm install --global --production windows-build-tools

ImageMagik:
https://www.imagemagick.org/download/binaries/ImageMagick-7.0.4-7-Q16-x64-dll.exe

---------------------------------------------------------------
                             MONGO
---------------------------------------------------------------

-------------  Start DB ---------------

// In new console, type:

	\mongodb\bin\mongod

-------------  Windows Console ---------------

c:\mongodb\bin\mongo

-------------  List dbs & use ---------------
show dbs
use food_maniac_dev

------ Rename db: ------ 
db.copyDatabase("food_maniac_dev","food_maniac_dev_save","localhost")
use food_maniac_dev
db.dropDatabase();
use food_maniac_dev_save

------ Create db: ------ 
--> use creates if it does not exist!
use xxxx

------ Reset dev db: ------ 
c:\mongodb\bin\mongo
use food_maniac_dev;
db.dropDatabase();
use food_maniac_dev;
exit;

------ Reset prod db: ------ 
mongo
use food_maniac;
db.dropDatabase();
use food_maniac;
exit;

-------------  List collections & content ---------------
show collections
db.items.find()

-------------  Change field name ---------------
db.items.update({}, {$rename: {'cuid': 'id'}}, { upsert:false, multi:true } )

-------------  Remove field ---------------
db.items.update({},{$unset: {cuid:1}}, {multi: true})
db.users.update({},{$unset: {cuid:1}}, {multi: true})
db.marks.update({},{$unset: {cuid:1}}, {multi: true})
db.places.update({},{$unset: {cuid:1}}, {multi: true})

---------------------------------------------------------------
                             BASICS
---------------------------------------------------------------



---------------- Debug ----------------

- install node-inspector: npm install -g node-inspector
- launch it: node-inspector
- run the app: node --debug server.js
(to rebuild client if necessary: npm run build )



---------------------------------------------------------------
                          SUBLIME
---------------------------------------------------------------

Find in files:
C:\workspace\mapTest\, -*/node_modules/*, -*/distBoServer/*, -*/distFoServer/*, -*/server/log*


---------------------------------------------------------------
                            GIT
---------------------------------------------------------------


---------- Git issue with proxy ---------- 

- Edit C:\Utilisateurs\a545888\.gitconfig
- For Github : 
    [http]
      proxy = proxy:3128
- For gitlab: remove http proxy! 
    [http]





---------------------------------------------------------------
                            Tricks
---------------------------------------------------------------

// Hot react reloading with nodejs
	- Use nodemon
	- use webpack-dev-middleware and webpack-hot-middleware



---------------------------------------------------------------
                            Documentation
---------------------------------------------------------------

// Mind Map:

	https://www.mindmeister.com/781979041

// Screens designs:

	https://sketchboard.me/XAaTovM1fJjS#/









---------------------------------------------------------------
                            Tools
---------------------------------------------------------------


// Update dependency version:

	npm install -g npm-check-updates
	ncu -u
	npm update --save







---------------------------------------------------------------
                            ubuntu
---------------------------------------------------------------

Version: 16.04
Note: get version with: lsb_release -a

Update:
sudo apt-get update
sudo apt-get upgrade
sudo apt autoremove
sudo apt-get dist-upgrade

Update Ubuntu:
sudo do-release-upgrade

sudo reboot
sudo shutdown -r now


---------------------------------------------------------------
                SSL with letsencrypt certbot
---------------------------------------------------------------

Did not do this:
  sudo apt install letsencrypt

Instead:

- Renew Letsencrypt certificate:
    - Ssh on the server
    - pm2 stop all
    - sudo systemctl stop nginx
    - /opt/letsencrypt/letsencrypt-auto renew
    - pm2 start all
    result (ceritificate) is there: /etc/letsencrypt/live/food-maniac.com/fullchain.pem 

- Creation process:
    - sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
    - cd /opt/letsencrypt
    - sudo systemctl stop nginx
    - ./letsencrypt-auto certonly â€“standalone
    - sudo nano /etc/nginx/sites-enabled/default
    - sudo systemctl start nginx




---------------------------------------------------------------
                            nginx
---------------------------------------------------------------


cd /etc/nginx/
more nginx.conf

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

IMPORTANT NOTE ON ADDING PATHES TO THE SERVER: look comment in boServer.js


---------------------- Logs & debug ---------------

LOG file here: /var/log/nginx

Test BoServer (NOT nginx) accessible locally, from server machine: curl localhost:8085/api



------------------  To restart nginx  ------------

/etc/init.d/nginx restart


------------------ File: sudo nano /etc/nginx/sites-available/default ------------------

# HTTP - redirect all requests to HTTPS:
server {
        listen 80;
        listen [::]:80 default_server ipv6only=on;
        return 301 https://$host$request_uri;
}

# HTTPS - proxy requests on to local Node.js app:
server {
        listen 443;
        server_name food-maniac.com;

        ssl on;
        # Use certificate and key provided by Let's Encrypt:
        ssl_certificate /etc/letsencrypt/live/food-maniac.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/food-maniac.com/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';


        # Pass requests for /api to localhost:8085:
        location /api/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/api/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /util to localhost:8085:
        location /util/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/util/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /socket.io to localhost:8085:
        location /socket.io/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/socket.io/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /static to localhost:8085:
        location /static/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/static/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /logs to localhost:8085:
        location /logs/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/logs/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for / to localhost:8080:
        location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8080/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
}





